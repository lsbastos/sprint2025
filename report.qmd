---
title: "Forecasts by UF"
author: "Leo Bastos"
format: html
editor: visual
---

```{r warning=F, message=FALSE, echo=FALSE}
library(tidyverse)
# library(geofacet)
library(MetBrewer)
library(ggpubr)
library(scales)
library(ggnewscale)
# library(sf)
library(colorspace)
# library(geobr)

pal <- met.brewer('Hiroshige', 5)[1:3]
pal2 <- c(met.brewer('Hiroshige', 7)[1], pal)

theme_legend_right <-  theme(text = element_text(family = 'arial'),
                             panel.border = element_blank(),
                             panel.grid.minor = element_blank(),
                             plot.title = element_text(hjust = 0.5, face = 'bold', size = 16),
                             axis.title.y = element_text(face = 'bold', margin = margin(r = .3, unit = 'cm')),
                             plot.margin = margin(t = 0.2, b = 0.2, r = 0.2, l = 0.2, unit = 'cm'),
                             legend.box.margin = margin(t = -0.2, b = -0.2, l = -0.2, r = 0.1, unit = 'cm'),
                             legend.position = 'right', 
                             legend.spacing.y = unit(-0.4, "cm"),
                             legend.text = element_text(size = 12), 
                             legend.key.spacing.y = unit(0.3, "cm"),
                             legend.title = element_text(size = 13, face = 'bold')) 

guides_2legends <- guides(fill = guide_legend(order = 1, override.aes = list(linetype = 0), 
                                              title.position = "top", 
                                              theme = theme(rect = element_rect(fill = NA),
                                                            legend.key = element_rect(fill = NA),
                                                            legend.title = element_text(hjust = 0.5, margin = margin(b = .3, unit = 'cm')))),
                          color = guide_legend(order = 0, 
                                               title = element_blank(), 
                                               title.position = "top", 
                                               theme = theme(rect = element_rect(fill = NA), 
                                                             legend.key = element_rect(fill = NA),
                                                             legend.text = element_text(face = 'bold'))))

guides_legends_chart <- guides(fill = guide_legend(order = 1, override.aes = list(linetype = 0), 
                                                   title.position = "top", 
                                                   theme = theme(rect = element_rect(fill = NA),
                                                                 legend.key = element_rect(fill = NA),
                                                                 legend.text = element_text(face = 'bold'))),
                               color = guide_legend(order = 0, 
                                                    override.aes = list(linetype = c('dashed', 'solid')),
                                                    title = element_blank(), 
                                                    title.position = "top", 
                                                    theme = theme(rect = element_rect(fill = NA), 
                                                                  legend.key = element_rect(fill = NA),
                                                                  legend.text = element_text(face = 'bold'))))


tbl.total.uf.week.train1 <- read_csv(file = "forecasts/tbl.sprint.uf.week.train1.csv")
tbl.total.uf.week.train2 <- read_csv(file = "forecasts/tbl.sprint.uf.week.train2.csv")
tbl.total.uf.week.train3  <- read_csv(file = "forecasts/tbl.sprint.uf.week.train3.csv")
tbl.total.uf.week.forecast  <- read_csv(file = "forecasts/tbl.sprint.uf.week.forecast.csv")


df4UFplot <- function(tbl.week, UF) {
  UF = "BR"
  temp <- tbl.week |> 
    filter(uf == UF) |> 
    transmute(week = week,
              q50 = pred, 
              q75 = upper_50,
              q90 = upper_90,
              q100 = Inf) 
  
  tmp1 <- temp |> 
    pivot_longer(
      cols = c(q50, q75, q90, q100),
      names_to = 'quantile',
      values_to = 'maxvalues'
    )
  
  tmp2 <- temp |> 
    mutate(q100 = q90,
           q90 = q75,
           q75 = q50,
           q50 = 0) |> 
    pivot_longer(
      cols = c(q50, q75, q90, q100),
      names_to = 'quantile',
      values_to = 'minvalues'
    )
  
  tmp <- tmp1 |> 
    left_join(tmp2, by = c('week', 'quantile')) |> 
    ungroup() 
  
  tmp$quantile <- factor(tmp$quantile, 
                         levels = c('q50','q75','q90','q100'),
                         labels = c('Abaixo da mediana,\ntípico','Moderadamente alto,\n bastante típico',
                                    'Bastante alto,\natípico', 'Excepcionalmente alto,\nmuito atípico'))
  return(tmp)
}

tbl.plot = df4UFplot(tbl.total.uf.week.forecast, UF = "SP" )

gt1br <- ggplot(tbl.plot, aes(x = week, fill = quantile)) +
  geom_ribbon(aes(ymin = minvalues, ymax = maxvalues), alpha = 0.7) + 
  scale_fill_manual(values = rev(pal2), name = 'Limiares epidêmicos probabilísticos') +
  # geom_line(aes(y = cases, color = 'black'), linewidth = 0.5, show.legend = T) +
  # scale_color_manual(values = 'black', name = '', labels = 'Observed cases') + 
  # scale_x_date(date_breaks = "1 month", date_labels = "%b", expand = c(0,0)) +
  scale_y_continuous(labels = scales::comma) +
  theme_bw(base_size = 16) +
  labs(
    title = '2025-2026',
    x = "",
    y = "Número de casos"
  ) + 
  theme_legend_right +
  theme(plot.margin = margin(t = 0.2, b = 0.2, r = 0.5, l = 0.2, unit = 'cm')) +
  guides_2legends +
  theme(axis.text.y = element_text(size = 12),
        axis.text.x = element_text(size = 12, angle = 45, vjust = .5))

gt1br
```


::: {.panel-tabset}

### 2022-2023

```{r }
tbl.total.uf.week.train1 |> 
  filter(uf == "MG") |> 
  ggplot(aes(x = date)) + 
  geom_ribbon(aes(ymin = lower_80, ymax = upper_80), alpha = 0.25) + 
  geom_line(aes(y = pred, color = "Predicted")) + 
  geom_line(aes(y = cases, , color = "Observed")) + 
  theme_bw()
```

### 2023-2024

```{r}
tbl.total.uf.week.train2 |> 
  filter(uf == "MG") |> 
  ggplot(aes(x = date)) + 
  geom_ribbon(aes(ymin = lower_80, ymax = upper_80), alpha = 0.25) + 
  geom_line(aes(y = pred, color = "Predicted")) + 
  geom_line(aes(y = cases, , color = "Observed")) + 
  theme_bw()
```

### 2024-2025

```{r warning=FALSE}
tbl.total.uf.week.train3 |> 
  filter(uf == "MG") |> 
  ggplot(aes(x = date)) + 
  geom_ribbon(aes(ymin = lower_80, ymax = upper_80), alpha = 0.25) + 
  geom_line(aes(y = pred, color = "Predicted")) + 
  geom_line(aes(y = cases, , color = "Observed")) + 
  theme_bw()
```

:::

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).
